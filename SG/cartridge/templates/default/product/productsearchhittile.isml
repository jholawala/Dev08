<iscontent type="text/html" charset="UTF-8" compact="true"/>
<iscache type="relative" hour="24" varyby="price_promotion"/>
<iscomment>
	This template renders a product in the search result using a ProductSearchHit object.
</iscomment>

<isif condition="${!empty(pdict.Product) }">

	<iscomment>Set the product of the product search hit locally for reuse</iscomment>
	<isset name="Product" value="${pdict.Product}" scope="page"/>
	<isset name="OrgProduct" value="${null}" scope="page"/>

	<iscomment>
		Get the colors selectable from the current product master or variant range if we
		need to determine them based on a search result.
	</iscomment>
	<isscript>
		var selectableColors : dw.util.Collection = new dw.util.ArrayList();
		var colorVarAttr : dw.catalog.ProductVariationAttribute = null;
		var imageSize = 'medium';
		var PVM : dw.catalog.ProductVariationModel = Product.variationModel;
		var selectedColor, imageSource, image;
		if (PVM) {
			colorVarAttr = PVM.getProductVariationAttribute('color');
			if (colorVarAttr != null) {
				selectableColors = PVM.getFilteredValues(colorVarAttr);
			}
			if (Product.isMaster() && PVM.defaultVariant) {
				if (colorVarAttr !== null) {
					imageSource = PVM.defaultVariant;
					selectedColor = imageSource.variationModel.getSelectedValue(colorVarAttr);
				} else {
					imageSource = PVM.master;
				}

			} else if (Product.isVariant()) {
				imageSource = selectedColor = PVM.getSelectedValue(colorVarAttr);
				if (!imageSource) {
					if (!PVM.variants.isEmpty()) {
						imageSource = PVM.variants[0];
						selectedColor = imageSource.variationModel.getSelectedValue(colorVarAttr);
					}
				}
			} else {
				// standard product, product set or bundle
				imageSource = Product;
			}
		} else {
			imageSource = Product;
		}
		image = imageSource.getImage(imageSize, 0);
	</isscript>
	<iscomment>
		Generate link to product detail page: by default it's just the product of the product search hit.
		If a color variation is available, the first color is used as link URL.
	</iscomment>
	<isset name="productUrl" value="${URLUtils.url('Product-Show', 'pid', Product.ID)}" scope="page"/>

<div class="product-tile" id="${Product.UUID}" data-itemid="${Product.ID}">

<iscomment>Image</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<div class="product-image"><!-- dwMarker="product" dwContentID="${Product.UUID}" -->
	<iscomment>Render the thumbnail</iscomment>
	<iscomment>If image couldn't be determined, display a "no image" medium.</iscomment>
		<isif condition="${!empty(image)}">
			<isset name="thumbnailUrl" value="${image.getURL()}" scope="page"/>
			<isset name="thumbnailAlt" value="${image.alt}" scope="page"/>
			<isset name="thumbnailTitle" value="${image.title}" scope="page"/>
		<iselse/>
			<isset name="thumbnailUrl" value="${URLUtils.staticURL('/images/noimagemedium.png')}" scope="page"/>
			<isset name="thumbnailAlt" value="${Product.name}" scope="page"/>
			<isset name="thumbnailTitle" value="${Product.name}" scope="page"/>
		</isif>
		
		<iscomment>RAP-2997, if the product name is missing from the image title, add it in</iscomment>
		<isif condition="${thumbnailTitle.charAt(0) == ','}">
			<isset name="thumbnailTitle" value="${Product.name + thumbnailTitle}" scope="page"/>
		</isif>
		<isif condition="${thumbnailAlt.charAt(0) == ','}">
			<isset name="thumbnailAlt" value="${Product.name + thumbnailAlt}" scope="page"/>
		</isif>
		
		<a class="thumb-link" href="${productUrl}" title="${Product.name}">
			<img src="${thumbnailUrl}" alt="${thumbnailAlt}" title="${thumbnailTitle}" />
		</a>
</div>

<iscomment>Product Name</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<div class="product-name">
	<h2>
		<a class="name-link" href="${productUrl}" title="${Product.name}">
			<isprint value="${Product.name}"/>
		</a>
	</h2>
</div>

<iscomment>Pricing</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<div class="product-pricing">
<isscript>
	var currencyCode = session.getCurrency().getCurrencyCode();
	var price = {};
	var PriceModelSource = Product, PriceModel;
	if (Product.productSet) {
		price.class = 'product-set-price';
		price.value = Resource.msg('global.buyall', 'locale', null);
	} else if (Product.master && pdict.CurrentHttpParameterMap.pricerange.stringValue == 'true') {
		// Product master price range depending on the represented variants
		price.class = 'product-sales-price';
		price.value = dw.util.StringUtils.formatMoney(dw.value.Money(pdict.CurrentHttpParameterMap.minprice, currencyCode)) + ' - ' + dw.util.StringUtils.formatMoney(dw.value.Money(pdict.CurrentHttpParameterMap.maxprice, currencyCode));
	} else {
		// For Product master without a price range get the pricing from first variant
		if (Product.master && pdict.CurrentHttpParameterMap.pricerange.stringValue != 'true') {
			PriceModelSource = Product.variants[0];
		}
		// Regular pricing through price model of the product. If the product is an option product, we have to initialize the product price model with the option model.
		if (Product.optionProduct) {
			PriceModel = PriceModelSource.getPriceModel(Product.getOptionModel());
		} else {
			PriceModel = PriceModelSource.getPriceModel();
		}
	}
</isscript>
<iscomment>
	Check whether the product has price in the sale pricebook. If so, then
	display two prices: crossed-out standard price and sales price.

	TODO: should find a better way to include logic.
</iscomment>
<isinclude template="product/components/standardprice"/>
<isscript>
	var prices = [];
	var SalesPrice, ShowStandardPrice, extraPrice;
	// simulate the same if else block from before the template include break
	if (!Product.productSet && pdict.CurrentHttpParameterMap.pricerange.stringValue != 'true') {
		SalesPrice = PriceModel.getPrice();
		ShowStandardPrice = StandardPrice.available && SalesPrice.available && StandardPrice.compareTo(SalesPrice) == 1;
		if (ShowStandardPrice) {
			price.class = 'product-standard-price';
			price.title = 'Regular Price';
			price.value = StandardPrice;
			extraPrice = {};
			extraPrice.class = 'product-sales-price';
			extraPrice.title = 'Sale Price';
			extraPrice.value = SalesPrice;
		} else {
			price.class = 'product-sales-price';
			price.title = 'Sale Price';
			price.value = SalesPrice;
		}
	}
	prices.push(price);
	if (extraPrice) {prices.push(extraPrice);}
</isscript>

<isloop items="${prices}" var="productPrice">
	<span class="${productPrice.class}" title="${productPrice.title}"><isprint value="${productPrice.value}"/></span>
</isloop>
</div>

<iscomment>Promotion</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<iscomment>Render information on active product promotions</iscomment>
<isset name="promos" value="${dw.campaign.PromotionMgr.activeCustomerPromotions.getProductPromotions(Product)}" scope="page"/>
<isif condition="${!empty(promos)}">
	<div class="product-promo">
		<isloop items="${promos}" var="promo" status="promoloopstate">
			<div class="promotional-message <isif condition="${promoloopstate.first}"> first <iselseif condition="${promoloopstate.last}"> last</isif>">
				<isprint value="${promo.calloutMsg}" encoding="off"/>
			</div>
		</isloop>
	</div>
</isif>


<iscomment>Compare</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<iscomment>
	Render the compare checkbox, if search result is based on a category context.
	The checkbox is displayed if either the category or one of its parent categories
	has the custom attribute "enableCompare" set to true.
</iscomment>
<isscript>importScript("product/ProductUtils.ds")</isscript>
<isif condition="${!empty(pdict.CurrentHttpParameterMap.cgid.value) && ProductUtils.isCompareEnabled(pdict.CurrentHttpParameterMap.cgid.value)}">
	   <div class="product-compare">
		<isif condition="${!Product.productSet && !Product.bundle}">
			<isscript>
				// mark the compare checkbox checked if the current product is
				// in the current comparison list for the current category

				importScript( "catalog/libCompareList.ds" );

				var comparison = GetProductCompareList();
				// Set the category
				if(!empty(pdict.ProductSearchResult && !empty(pdict.ProductSearchResult.category) ))
					comparison.setCategory(pdict.ProductSearchResult.category.ID);

				var comparisonProducts = null;

				if (comparison) {
					comparisonProducts = comparison.getProducts();
				}

				var checkedStr = '';

				if (!empty(comparisonProducts)) {
					var pIt = comparisonProducts.iterator();
					var productId = null;

					while (pIt.hasNext()) {
						productId = pIt.next();
						if (productId == Product.ID) {
							checkedStr = 'checked="checked"';
							break;
						}
					}
				}
			</isscript>
			<input type="checkbox" class="compare-check" id="${'cc-'+Product.UUID}" <isprint value="${checkedStr}" encoding="off" />/>
			<label for="${'cc-'+Product.UUID}">Compare</label>
		</isif>
	</div>

</isif>

<iscomment>Reviews</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<isif condition="${!Product.productSet}">
	<isinclude template="product/components/reviewsmini"/>
</isif>


 <iscomment>Swatches</iscomment>
<iscomment>++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++</iscomment>

<iscomment>
	Render the color swatch secion for a product search hit. The swatches depend on the products the search hit actually represents.
	Doesn't necessarily equal all variants of a product master, since only a sub set of variants could be represented by the search
	hit (a variant group). We show color swatches only for variant groups represented by a product search hit.
</iscomment>
<isif condition="${!empty(selectableColors) && selectableColors.size() > 1 && !empty(colorVarAttr)}">
	<div class="product-swatches">
		<iscomment>render a link to the palette and hide the actual palette if there are more than five colors contained</iscomment>
		<isif condition="${selectableColors.size() > 5}">
			<div class="product-swatches-all">${Resource.msg('productresultarea.viewallcolors','search',null)} (<isprint value="${selectableColors.size()}"/>)</div>
		</isif>

		<iscomment>render the palette, the first swatch is always preselected</iscomment>
		<ul class="swatch-list<isif condition="${selectableColors.size() > 5}"> swatch-toggle</isif>">
			<isloop items="${selectableColors}" var="colorValue" status="varloop">
				<iscomment>Determine the swatch and the thumbnail for this color</iscomment>
				<isset name="colorSwatch" value="${colorValue.getImage('swatch')}" scope="page"/>
				<isset name="colorThumbnail" value="${colorValue.getImage('medium')}" scope="page"/>

				<iscomment>If images couldn't be determined, display a "no image" thumbnail</iscomment>
				<isif condition="${!empty(colorSwatch)}">
					<isset name="swatchUrl" value="${colorSwatch.getURL()}" scope="page"/>
					<isset name="swatchAlt" value="${colorSwatch.alt}" scope="page"/>
					<isset name="swatchTitle" value="${colorSwatch.title}" scope="page"/>
				<iselse/>
					<isset name="swatchUrl" value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page"/>
					<isset name="swatchAlt" value="${colorValue.displayValue}" scope="page"/>
					<isset name="swatchTitle" value="${colorValue.displayValue}" scope="page"/>
				</isif>
				<isif condition="${!empty(colorThumbnail)}">
					<isset name="thumbnailUrl" value="${colorThumbnail.getURL()}" scope="page"/>
					<isset name="thumbnailAlt" value="${colorThumbnail.alt}" scope="page"/>
					<isset name="thumbnailTitle" value="${colorThumbnail.title}" scope="page"/>
				<iselse/>
					<isset name="thumbnailUrl" value="${URLUtils.staticURL('/images/noimagesmall.png')}" scope="page"/>
					<isset name="thumbnailAlt" value="${colorValue.displayValue}" scope="page"/>
					<isset name="thumbnailTitle" value="${colorValue.displayValue}" scope="page"/>
				</isif>
				<isif condition="${!empty(selectedColor)}">
					<isset name="preselectCurrentSwatch" value="${colorValue.value == selectedColor.value}" scope="page"/>
				<iselse/>
					<isset name="preselectCurrentSwatch" value="${varloop.first}" scope="page"/>
				</isif>

				<iscomment>build the proper URL and append the search query parameters</iscomment>
				<isset name="swatchproductUrl" value="${Product.variationModel.url('Product-Show', colorVarAttr, colorValue.value)}" scope="page"/>
				<isif condition="${!empty(pdict.ProductSearchResult)}">
					<isset name="swatchproductUrl" value="${pdict.ProductSearchResult.url(swatchproductUrl)}" scope="page"/>
				</isif>

				<iscomment>render a single swatch, the url to the proper product detail page is contained in the href of the swatch link</iscomment>
				<li>
					<a href="${swatchproductUrl}" class="swatch ${(preselectCurrentSwatch) ? 'selected' : ''}" title="<isprint value="${colorValue.displayValue}"/>">
						<img src="${swatchUrl}" alt="${swatchAlt}" title="${swatchTitle}" data-thumb='{"src":"${thumbnailUrl}","alt":"<isprint value="${thumbnailAlt}"/>","title":"<isprint value="${thumbnailTitle}"/>"}'/>
					</a>
				</li>
			</isloop>
		</ul>
	</div>
</isif>

</div><!--  END: .product-tile -->

</isif>
